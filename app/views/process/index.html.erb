<div class = 'main' >
  <div class = 'command'>
  </div>
</div>

<div>
  <input id="info" type ='text'>
  <input id = 'submit' type = 'submit'>
</div>


<script>
  var table = {};
  $(document).on('turbolinks:load', function() {

      $("#submit").on('click', function() {

          // Get the command, parse it.
          var value = $("#info").val();
          $('#info').val("");
          var words = value.split(" ");

          console.log(words);
          // Identify the type of command.
          // words[0] : name of command
          // for most cases: words[1]: name of key
          // word[2] onwards : array of values
          switch(words[0]) {
              case "SET":
                  set_string(words[1], words[2]);
                  break;
              case "GET":
                  get_string(words[1]);
                  break;
              case "LLEN":
                  length(words[1]);
                  break;
              case "RPUSH":
                  arr = words.slice(2);
                  push(words[1], arr);
                  break;
              case "LPOP":
                  left_pop(words[1]);
                  break;
              case "RPOP":
                  right_pop(words[1]);
                  break;
              case "LRANGE":
                  range(words[1], words[2], words[3]);
                  break;
              case "SADD":
                  arr = words.slice(2);
                  set_add(words[1], arr);
                  break;
              case "SCARD":
                  set_card(words[1]);
                  break;
              case "SMEMBERS":
                  set_member(words[1]);
                  break;
              case "SREM":
                  arr = words.slice(2);
                  set_remove(words[1], arr);
                  break;
              case "SINTER":
                  arr = words.slice(1);
                  set_intersection(arr);
                  break;
              case "KEYS":
                  listKeys();
                  break;
              case "DEL":
                  deleteKey(words[1]);
                  break;
              case "FLUSHDB":
                  flush();
                  break;
              case "EXPIRE":
                  key = words[1];
                  time = words[2];
                  // delete a key after a given period, store the function in the table
                  timeObject = timer(function() {deleteKey(key);}, time * 1000);
                  table[key] = timeObject;
                  break;
              case "TTL":
                  timeOut(words[1]);
                  break;
              default:
          }
      })
  })

  // This function timer is to help setTimeOut and query the time left.
  function timer(callback, delay) {
      var id, started, remaining = delay, running

      this.start = function() {
          running = true
          started = new Date()
          id = setTimeout(callback, remaining)
      }

      this.pause = function() {
          running = false
          clearTimeout(id)
          remaining -= new Date() - started
      }

      this.getTimeLeft = function() {
          if (running) {
              this.pause()
              this.start()
          }

          return remaining
      }

      this.getStateRunning = function() {
          return running
      }

      this.start()
      return this;
  }


  function set_string(key, value) {
      $.ajax({
          type: "GET",
          data: {
              key: key,
              value: value
          },
          url: "<%= url_for(controller: 'string_process', action: 'set_string') %>",
          dataType: "script"
      });
  }

  function get_string(key) {
      $.ajax({
          type: "GET",
          data: {
              key: key
          },
          url: "<%= url_for(controller: 'string_process', action: 'get_string') %>",
          dataType: "script"
      });
  }

  function length(key) {
      $.ajax({
          type: "GET",
          data: {
              key: key
          },
          url: "<%= url_for(controller: 'list_process', action: 'length') %>",
          dataType: "script"
      });
  }

  function push(key, arr) {
      $.ajax({
          type: "GET",
          data: {
              key: key,
              arr: arr
          },
          url: "<%= url_for(controller: 'list_process', action: 'push') %>",
          dataType: "script"
      });
  }

  function left_pop(key) {
      $.ajax({
          type: "GET",
          data: {
              key: key
          },
          url: "<%= url_for(controller: 'list_process', action: 'left_pop') %>",
          dataType: "script"
      });
  }

  function right_pop(key) {
      $.ajax({
          type: "GET",
          data: {
              key: key
          },
          url: "<%= url_for(controller: 'list_process', action: 'right_pop') %>",
          dataType: "script"
      });
  }

  function range(key, start, stop) {
      $.ajax({
          type: "GET",
          data: {
              key: key,
              start: start,
              stop: stop
          },
          url: "<%= url_for(controller: 'list_process', action: 'range') %>",
          dataType: "script"
      });
  }

  function set_add(key, arr) {
      $.ajax({
          type: "GET",
          data: {
              key: key,
              arr: arr
          },
          url: "<%= url_for(controller: 'set_process', action: 'add') %>",
          dataType: "script"
      });
  }

  function set_card(key) {
      $.ajax({
          type: "GET",
          data: {
              key: key
          },
          url: "<%= url_for(controller: 'set_process', action: 'card') %>",
          dataType: "script"
      });
  }

  function set_member(key) {
      $.ajax({
          type: "GET",
          data: {
              key: key
          },
          url: "<%= url_for(controller: 'set_process', action: 'members') %>",
          dataType: "script"
      });
  }

  function set_remove(key, arr) {
      $.ajax({
          type: "GET",
          data: {
              key: key,
              arr: arr
          },
          url: "<%= url_for(controller: 'set_process', action: 'remove') %>",
          dataType: "script"
      });
  }

  function set_intersection(arr) {
      $.ajax({
          type: "GET",
          data: {
              arr: arr
          },
          url: "<%= url_for(controller: 'set_process', action: 'intersect') %>",
          dataType: "script"
      });
  }

  function listKeys() {
      $.ajax({
          type: "GET",
          url: "<%= url_for(controller: 'expire_process', action: 'key') %>",
          dataType: "script"
      });
  }

  function deleteKey(key) {
      $.ajax({
          type: "GET",
          data: {
              key: key
          },
          url: "<%= url_for(controller: 'expire_process', action: 'delete') %>",
          dataType: "script"
      });
  }

  function flush() {
      $.ajax({
          type: "GET",
          url: "<%= url_for(controller: 'expire_process', action: 'flush') %>",
          dataType: "script"
      });
  }

  function timeOut(key) {
      time = table[key].getTimeLeft();
      $('.command').append('<div>' + time / 1000   + '</div>');
  }

</script>
